
.form {
  label {
    display: block;
    font-weight: bold;
    line-height: @font-size-base;
    margin-bottom: 12px;
  }
}

@form-input-margin: 9px;

.form-row {
  .flex-display;
  margin-left: -@form-input-margin;
  margin-right: -@form-input-margin;
}

.form-group {
  .flex;
  margin: 0 @form-input-margin 16px;
}


.input {
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border-radius: @input-border-radius;
  border: 1px solid @border;
  color: @input-color;
  display: block;
  font-size: @font-size-base;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  line-height: @line-height-base;
  padding: @padding-base-vertical @padding-base-horizontal;
  width: 100%;
  .transition(~"border-color ease-in-out .15s");

  // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  // Reset height for `textarea`s
  textarea& {
    height: auto;
  }
}

@margin-combined: (@form-input-margin*2);

.input-columns(12);

.input-columns(@n, @i: 1) when (@i =< @n) {
  @calc: (@i * 100% / @n);
  .input-@{i} {
    width: calc(  @calc - @margin-combined);
  }
  .input-columns(@n, (@i + 1));
}
