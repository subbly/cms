
.form {
}

.form-row {
  .flex-display;
  margin-left: -@input-margin-horizontal;
  margin-right: -@input-margin-horizontal;
}

.form-field {
  .flex;
  margin: 0 @input-margin-horizontal @padding-large-vertical;
  position: relative;
  width: 100%;
}

.form-label {
  display: block;
  font-weight: bold;
  line-height: @font-size-base;
  margin-bottom: @padding-base-horizontal;
}

.form-input {
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  background-color: transparent;
  border-radius: @input-border-radius;
  border: 1px solid @border;
  color: @input-color;
  display: block;
  font-size: @font-size-base;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  line-height: @line-height-base;
  padding: 10px @padding-base-horizontal;
  width: 100%;
  .transitionBlocks(~"border-color ease-in-out .15s, background-color ease-in-out .15s");

  // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }

  // Reset height for `textarea`s
  textarea& {
    min-height: 140px;
    resize:none;
  }

  &.warning {
    .placeholder( @brand-danger );
    border-color: @brand-danger !important;
    color: @brand-danger;
  }
}

//
// Select
// --------------------------------------------------

select {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.form-select-holder {
  display: block;
  position: relative;

  // Dropdown arrow 
  &:before {
    background: @input-bg;
    border-radius: @input-border-radius;
    bottom: 1px;
    content: '';
    cursor: pointer;
    pointer-events: none;
    position: absolute;
    right: 2px;
    top: 1px;
    width: @input-height-base;
    z-index: 10;
  }

  &:after {
    border-bottom: @caret-width-large solid transparent;
    border-left: @caret-width-large solid transparent;
    border-right: @caret-width-large solid transparent;
    border-top: @caret-width-large solid;
    content: '';
    display: inline-block;
    height: 0;
    margin-top: -.15rem;
    pointer-events: none;
    position: absolute;
    right: 1.25rem;
    top: 50%;
    width: 0;
    z-index: 20;
  }

  select {
    background-color: @input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214    
  }
}

// select.form-input {
//   width: 100%;
// }

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

//
// Input Addon button
// --------------------------------------------------


.input-addon {
}


.form-input-addon {
  background: @border;
  bottom: 1px;
  display: block;
  height: ( @input-height-base - 2px ); // -2px for border top & bottom
  font-weight: bold;
  line-height: @input-height-base;
  padding: 0 @padding-base-horizontal;
  position: absolute;
  right: 1px;

  // &:before {
  //   background-image: -moz-linear-gradient(right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));
  //   background-image: -ms-linear-gradient(right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));
  //   background-image: -o-linear-gradient(right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));
  //   background-image: -webkit-gradient(linear, 0 0, 100% 0, from(rgba(255, 255, 255, 1)), to(rgba(255, 255, 255, 0)));
  //   background-image: -webkit-linear-gradient(right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));
  //   background-image: linear-gradient(right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));
  //   background-repeat: repeat-x;
  //   bottom: 0;
  //   content: '';
  //   height: ( @input-height-base - 2px ); // -2px for border top & bottom
  //   left: -30px;
  //   position: absolute;
  //   width: 30px;
  // }

  // TODO
  &.active {
    background: green;
    color: red;
  }
}

//
// Input Search
// --------------------------------------------------
// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  .box-sizing(border-box);
  font-family: @font-family-base;
  padding-left: @content-padding;
}

.input-search-holder {
  font-size: @font-size-large;
  position: relative;

  &:before {
    content: "\e605";
    display: block;
    height: 22px;
    left: @padding-large-horizontal;
    position: absolute;
    top: @padding-base-horizontal;
    width: 20px;
  }
}


.input-search {
  border-radius: 60px;
}

//
// Input columns
// --------------------------------------------------

.input-columns( @grid-columns );

.input-columns(@n, @i: 1) when (@i =< @n) {
  @input-width: (@i * 100% / @n);
  .input-@{i} {
    width: calc(  @input-width - @input-margin-combined);
  }
  .input-columns(@n, (@i + 1));
}
